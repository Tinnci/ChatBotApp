name: Android CI with QNN

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: '构建类型'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
      run_tests:
        description: '运行测试'
        required: true
        default: false
        type: boolean
      enable_qnn:
        description: '是否启用QNN'
        required: true
        default: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Cache NDK
      uses: actions/cache@v4
      with:
        path: |
          $ANDROID_HOME/ndk
        key: ${{ runner.os }}-ndk-${{ hashFiles('**/*.pro') }}
        restore-keys: |
          ${{ runner.os }}-ndk-

    - name: Setup NDK
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r26d
        link-to-sdk: true
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
            
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Install OpenMP
      run: |
        sudo apt-get update
        sudo apt-get install -y libomp-dev

    - name: Download QNN SDK
      if: ${{ github.event.inputs.enable_qnn }}
      run: |
        # 创建正确的目标目录
        mkdir -p ${{ github.workspace }}/src/backends/qnn/sdk
        cd ${{ github.workspace }}/src/backends/qnn/sdk
        
        # 下载QNN SDK
        echo "正在下载QNN SDK..."
        curl -L -o qnn_sdk.zip \
             "https://apigwx-aws.qualcomm.com/qsc/public/v1/api/download/software/tool/qualcomm_neural_processing_sdk_public/2.27.0.240926/Linux/qualcomm_neural_processing_sdk_public.Core.2.27.0.240926.Linux-AnyCPU.zip"
        
        # 解压SDK并确保正确的目录结构
        unzip -q qnn_sdk.zip
        cp -r qairt/2.27.0.240926/* .
        rm -rf qairt qnn_sdk.zip
        
        # 验证关键目录存在
        if [ ! -d "lib" ] || [ ! -d "include" ] || [ ! -d "bin" ]; then
          echo "错误：QNN SDK目录结构不完整"
          ls -la
          exit 1
        fi
        
        # 验证Android特定目录
        if [ ! -d "lib/aarch64-android" ]; then
          echo "错误：缺少Android ARM64库文件"
          exit 1
        fi
        
        # 设置QNN环境变量
        {
          echo "QNN_SDK_ROOT=${{ github.workspace }}/src/backends/qnn/sdk"
          echo "PYTHONPATH=${{ github.workspace }}/src/backends/qnn/sdk/lib/python:$PYTHONPATH"
          echo "LD_LIBRARY_PATH=${{ github.workspace }}/src/backends/qnn/sdk/lib/x86_64-linux-clang:$LD_LIBRARY_PATH"
          echo "PATH=${{ github.workspace }}/src/backends/qnn/sdk/bin/x86_64-linux-clang:$PATH"
          
          # Android特定配置
          echo "ANDROID_NDK=$ANDROID_NDK_ROOT"
          echo "QNN_ANDROID_BUILD=1"
          echo "QNN_TARGET_ARCH=aarch64-android"
          echo "QNN_ENABLE_HTP=1"
          echo "QNN_ENABLE_GPU=1"
          echo "QNN_ENABLE_CPU=1"
        } >> $GITHUB_ENV
      
    - name: Setup Native Libraries
      run: |

        # 克隆 MLLM 仓库
        git clone --recursive https://github.com/lx200916/mllm.git
        cd mllm

        # 验证 QNN SDK 目录结构
        if [ ! -d "${{ github.workspace }}/src/backends/qnn/sdk" ]; then
          echo "错误：QNN SDK 目录不存在"
          exit 1
        fi
        
        mkdir -p build-arm-app
        cd build-arm-app
        
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DANDROID_ABI="arm64-v8a" \
          -DANDROID_NATIVE_API_LEVEL=android-28 \
          -DNATIVE_LIBRARY_OUTPUT=. \
          -DNATIVE_INCLUDE_OUTPUT=. \
          -DARM=ON \
          -DAPK=ON \
          -DQNN=${{ github.event.inputs.enable_qnn }} \
          -DDEBUG=OFF \
          -DTEST=OFF \
          -DQUANT=OFF \
          -DQNN_VALIDATE_NODE=${{ github.event.inputs.enable_qnn }} \
          -DMLLM_BUILD_XNNPACK_BACKEND=OFF \
          -DQNN_SDK_ROOT=${{ github.workspace }}/src/backends/qnn/sdk
        
        make mllm_lib -j$(nproc)
      env:
        QNN_SDK_ROOT: ${{ github.workspace }}/src/backends/qnn/sdk
        ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        QNN_TARGET_ARCH: aarch64-android
        QNN_ANDROID_BUILD: 1
        QNN_ENABLE_HTP: 1
        QNN_ENABLE_GPU: 1
        QNN_ENABLE_CPU: 1

    - name: Copy MLLM Libraries
      run: |
        # 复制MLLM库并验证
        mkdir -p app/src/main/cpp/libs/arm64-v8a/
        cp build-arm-app/libmllm_lib.a app/src/main/cpp/libs/arm64-v8a/
        ls -l app/src/main/cpp/libs/arm64-v8a/

    - name: Build with Gradle
      run: |
        echo "::group::Gradle Build Log"
        ./gradlew assemble${{ github.event.inputs.build_type == 'release' && 'Release' || 'Debug' }} --info
        echo "::endgroup::"
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        
    - name: Run Tests
      if: ${{ github.event.inputs.run_tests == 'true' }}
      run: ./gradlew test
      
    - name: Upload Debug APK
      if: ${{ github.event.inputs.build_type == 'debug' }}
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: app/build/outputs/apk/debug/*.apk
        
    - name: Upload Release APK
      if: ${{ github.event.inputs.build_type == 'release' }}
      uses: actions/upload-artifact@v4
      with:
        name: app-release
        path: app/build/outputs/apk/release/*.apk